# 3. UserInterface: Class to handle user interaction and display the report generated by the WeatherDataParser
# Attributes: data from WeatherDataParser
# Methods: get_city_input(), get_detailed_forecast(), display_weather()

class UserInterface:
    def __init__(self, parser):
        self.parser = parser  # data from WeatherDataParser in the form of a string report
        # example: "Weather in New York: 70 degrees, Sunny, Humidity: 50%"

    def get_forecast(self, city):
        """takes the city as input and returns a detailed weather
        forecast that includes the temperature, condition, and humidity.
        """
        detail_level = input("Do you want a detailed forecast? (yes/no): ").lower()
        if detail_level == 'yes':
            print(f"Fetching detailed forecast for {city}...")
            return self.parser.parse_detailed_data()
        else:
            print(f"Fetching basic forecast for {city}...")
            return self.parser.parse_basic_data()

    def display_weather(self, city):
        forecast = self.get_forecast(city)
        print(forecast)
